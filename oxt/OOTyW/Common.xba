<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Common" script:language="StarBasic">REM  *****  BASIC  *****


Sub Main
&apos; ----------------------------------------------------------------------
&apos; Replace keyboard glyphs by typographical correct glyphs
&apos; ----------------------------------------------------------------------

Apostrophe
Ellipsis

End Sub



Sub Apostrophe
&apos; ----------------------------------------------------------------------
&apos; Convert number signs into apostrophes
&apos; ----------------------------------------------------------------------

Dim AOldStr(1) As String
Dim ANewStr(1) As String

AOldStr() = Array(&quot;#&quot;)
ANewStr() = Array(&quot;’&quot;)

sar(AOldStr,ANewStr,False)

End Sub



Sub Ellipsis
&apos; ----------------------------------------------------------------------
&apos; Convert three periods into ellipsis
&apos; ----------------------------------------------------------------------

Dim AOldStr(0) As String
Dim ANewStr(0) As String

AOldStr() = Array(&quot;...&quot;)
ANewStr() = Array(&quot;…&quot;)

sar(AOldStr,ANewStr,False)

End Sub



sub En_dash
&apos; ----------------------------------------------------------------------
&apos; Convert double hyphens into en-dashes
&apos; ----------------------------------------------------------------------

Dim AOldStr(0) As String
Dim ANewStr(0) As String

AOldStr() = Array(&quot;--&quot;)
ANewStr() = Array(&quot;–&quot;)

sar(AOldStr,ANewStr,False)

ProtectQM

End Sub



Sub ProtectQM
&apos; ----------------------------------------------------------------------
&apos; Prevent hyphenation around quotation marks
&apos; ----------------------------------------------------------------------

Interruption(CHR$(34),CHR$(34))
Interruption(&quot;»&quot;,&quot;«&quot;)
Interruption(&quot;«&quot;,&quot;»&quot;)
Interruption( &quot;“&quot;,&quot;”&quot;)
Interruption(&quot;„&quot;,&quot;“&quot;)

End Sub



Sub Interruption(ChOpen,ChClose)
&apos; ----------------------------------------------------------------------
&apos; Put non-breakable blanks at dashes and ellipses
&apos; leading or terminating direct speech
&apos; ----------------------------------------------------------------------

Dim AOldStr(3) As String
Dim ANewStr(3) As String

AOldStr() = Array(&quot; –&quot;+ChClose,ChOpen+&quot;– &quot;,&quot; …&quot;+ChClose,ChOpen+&quot;… &quot;)
ANewStr() = Array(Chr(160)+&quot;–&quot;+ChClose,ChOpen+&quot;–&quot;+Chr(160),Chr(160)+&quot;…&quot;+ChClose,ChOpen+&quot;…&quot;+Chr(160))

sar(AOldStr,ANewStr,False)

End Sub



sub SmartQuote(ChOpen1,ChClose1,ChOpen2,ChClose2)
&apos; ----------------------------------------------------------------------
&apos; Replace keyboard characters by quotation marks 
&apos; ----------------------------------------------------------------------

Dim AOldStr(1) As String
Dim ANewStr(1) As String

AOldStr() = Array(&quot;(\&apos;\&lt;)([^\&apos;]*[\.\?!,]?)(\&apos;)&quot;,&quot;(\&quot;+CHR$(34)+&quot;\&lt;)([^\&quot;+CHR$(34)+&quot;]*[\.\?!,]?)(\&quot;+CHR$(34)+&quot;)&quot;)
ANewStr() = Array(ChOpen1+&quot;$2&quot;+ChClose1, ChOpen2+&quot;$2&quot;+ChClose2)

sar(AOldStr,ANewStr,True)

End Sub



sub ShowDirectSpeech(QuotedTextPattern)
&apos; ----------------------------------------------------------------------
&apos; colorize non-direct speech light gray.
&apos; Direct speech is defined by regular expression QuotedTextPattern
&apos; ----------------------------------------------------------------------

&apos; ----------------------------------------------------------------------
&apos; define variables

dim document   as object
dim dispatcher as object
dim oSaveCursor as object
dim oViewCursor as object

&apos; ----------------------------------------------------------------------
&apos; define constants

Black = 00000000
Gray = 13421772

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

&apos; ----------------------------------------------------------------------
&apos; save cursor position

oViewCursor = ThisComponent.CurrentController().getViewCursor()
oSaveCursor = ThisComponent.Text.createTextCursorByRange(oViewCursor)

&apos; ----------------------------------------------------------------------
&apos; select whole text

dispatcher.executeDispatch(document, &quot;.uno:SelectAll&quot;, &quot;&quot;, 0, Array())

&apos; ----------------------------------------------------------------------
&apos; set whole text to gray

dim args2(0) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;Color&quot;
args2(0).Value = Gray

dispatcher.executeDispatch(document, &quot;.uno:Color&quot;, &quot;&quot;, 0, args2())

&apos; ----------------------------------------------------------------------
&apos; mark all text within quotes

dim args3(18) as new com.sun.star.beans.PropertyValue
args3(0).Name = &quot;SearchItem.StyleFamily&quot;
args3(0).Value = 2
args3(1).Name = &quot;SearchItem.CellType&quot;
args3(1).Value = 0
args3(2).Name = &quot;SearchItem.RowDirection&quot;
args3(2).Value = true
args3(3).Name = &quot;SearchItem.AllTables&quot;
args3(3).Value = false
args3(4).Name = &quot;SearchItem.Backward&quot;
args3(4).Value = false
args3(5).Name = &quot;SearchItem.Pattern&quot;
args3(5).Value = false
args3(6).Name = &quot;SearchItem.Content&quot;
args3(6).Value = false
args3(7).Name = &quot;SearchItem.AsianOptions&quot;
args3(7).Value = false
args3(8).Name = &quot;SearchItem.AlgorithmType&quot;
args3(8).Value = 1
args3(9).Name = &quot;SearchItem.SearchFlags&quot;
args3(9).Value = 65536
args3(10).Name = &quot;SearchItem.SearchString&quot;
args3(10).Value = QuotedTextPattern
args3(11).Name = &quot;SearchItem.ReplaceString&quot;
args3(11).Value = &quot;&quot;
args3(12).Name = &quot;SearchItem.Locale&quot;
args3(12).Value = 255
args3(13).Name = &quot;SearchItem.ChangedChars&quot;
args3(13).Value = 2
args3(14).Name = &quot;SearchItem.DeletedChars&quot;
args3(14).Value = 2
args3(15).Name = &quot;SearchItem.InsertedChars&quot;
args3(15).Value = 2
args3(16).Name = &quot;SearchItem.TransliterateFlags&quot;
args3(16).Value = 1280
args3(17).Name = &quot;SearchItem.Command&quot;
args3(17).Value = 1
args3(18).Name = &quot;Quiet&quot;
args3(18).Value = true

dispatcher.executeDispatch(document, &quot;.uno:ExecuteSearch&quot;, &quot;&quot;, 0, args3())

&apos; ----------------------------------------------------------------------
&apos; set color of text in quotes to black

dim args4(0) as new com.sun.star.beans.PropertyValue
args4(0).Name = &quot;Color&quot;
args4(0).Value = Black

dispatcher.executeDispatch(document, &quot;.uno:Color&quot;, &quot;&quot;, 0, args4())

&apos; ----------------------------------------------------------------------
&apos; restore cursor position

oViewCursor.gotoRange(oSaveCursor,False)

end sub



sub StandardView
&apos; ----------------------------------------------------------------------
&apos; Set all text to default color
&apos; ----------------------------------------------------------------------

&apos; ----------------------------------------------------------------------
&apos; define variables

dim document   as object
dim dispatcher as object
dim oSaveCursor as object
dim oViewCursor as object

&apos; ----------------------------------------------------------------------
&apos; define constants

DefaultColor = -1

&apos; ----------------------------------------------------------------------
&apos; get access to the document

document   = ThisComponent.CurrentController.Frame
dispatcher = createUnoService(&quot;com.sun.star.frame.DispatchHelper&quot;)

&apos; ----------------------------------------------------------------------
&apos; save cursor position

oViewCursor = ThisComponent.CurrentController().getViewCursor()
oSaveCursor = ThisComponent.Text.createTextCursorByRange(oViewCursor)

&apos; ----------------------------------------------------------------------
&apos; select whole text

dispatcher.executeDispatch(document, &quot;.uno:SelectAll&quot;, &quot;&quot;, 0, Array())

&apos; ----------------------------------------------------------------------
&apos; set text color to default (should delete hard formatting)

dim args2(0) as new com.sun.star.beans.PropertyValue
args2(0).Name = &quot;Color&quot;
args2(0).Value = DefaultColor

dispatcher.executeDispatch(document, &quot;.uno:Color&quot;, &quot;&quot;, 0, args2())

&apos; ----------------------------------------------------------------------
&apos; restore cursor position

oViewCursor.gotoRange(oSaveCursor,False)

end sub



sub sar(AOldStr,ANewStr,regex)
&apos; ----------------------------------------------------------------------
&apos; Search and replace array of strings
&apos; ----------------------------------------------------------------------

Dim I As Long
Dim Doc As Object
Dim Replace As Object

Doc = StarDesktop.CurrentComponent
Replace = Doc.createReplaceDescriptor
Replace.SearchRegularExpression = regex

For I = 0 to UBound(AOldStr)
	Replace.setSearchString(AOldStr(I))
	Replace.setReplaceString(ANewStr(I))
	Doc.replaceAll(Replace)
Next I

End Sub

</script:module>